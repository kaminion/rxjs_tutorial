{"dependencies":[{"name":"tslib","loc":{"line":2,"column":25}},{"name":"./fromArray","loc":{"line":3,"column":26}},{"name":"../util/isArray","loc":{"line":4,"column":24}},{"name":"../Subscriber","loc":{"line":5,"column":27}},{"name":"../../internal/symbol/iterator","loc":{"line":6,"column":44}},{"name":"../innerSubscribe","loc":{"line":7,"column":77}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ZipSubscriber = exports.ZipOperator = undefined;\nexports.zip = zip;\n\nvar _tslib = require(\"tslib\");\n\nvar tslib_1 = _interopRequireWildcard(_tslib);\n\nvar _fromArray = require(\"./fromArray\");\n\nvar _isArray = require(\"../util/isArray\");\n\nvar _Subscriber = require(\"../Subscriber\");\n\nvar _iterator = require(\"../../internal/symbol/iterator\");\n\nvar _innerSubscribe = require(\"../innerSubscribe\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_.._internal_symbol_iterator,_innerSubscribe PURE_IMPORTS_END */\nfunction zip() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  var resultSelector = observables[observables.length - 1];\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n  return (0, _fromArray.fromArray)(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nvar ZipOperator = /*@__PURE__*/function () {\n  function ZipOperator(resultSelector) {\n    this.resultSelector = resultSelector;\n  }\n  ZipOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n  };\n  return ZipOperator;\n}();\nexports.ZipOperator = ZipOperator;\n\nvar ZipSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ZipSubscriber, _super);\n  function ZipSubscriber(destination, resultSelector, values) {\n    if (values === void 0) {\n      values = Object.create(null);\n    }\n    var _this = _super.call(this, destination) || this;\n    _this.resultSelector = resultSelector;\n    _this.iterators = [];\n    _this.active = 0;\n    _this.resultSelector = typeof resultSelector === 'function' ? resultSelector : undefined;\n    return _this;\n  }\n  ZipSubscriber.prototype._next = function (value) {\n    var iterators = this.iterators;\n    if ((0, _isArray.isArray)(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[_iterator.iterator] === 'function') {\n      iterators.push(new StaticIterator(value[_iterator.iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  };\n  ZipSubscriber.prototype._complete = function () {\n    var iterators = this.iterators;\n    var len = iterators.length;\n    this.unsubscribe();\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n    this.active = len;\n    for (var i = 0; i < len; i++) {\n      var iterator = iterators[i];\n      if (iterator.stillUnsubscribed) {\n        var destination = this.destination;\n        destination.add(iterator.subscribe());\n      } else {\n        this.active--;\n      }\n    }\n  };\n  ZipSubscriber.prototype.notifyInactive = function () {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  };\n  ZipSubscriber.prototype.checkIterators = function () {\n    var iterators = this.iterators;\n    var len = iterators.length;\n    var destination = this.destination;\n    for (var i = 0; i < len; i++) {\n      var iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n    var shouldComplete = false;\n    var args = [];\n    for (var i = 0; i < len; i++) {\n      var iterator = iterators[i];\n      var result = iterator.next();\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n      args.push(result.value);\n    }\n    if (this.resultSelector) {\n      this._tryresultSelector(args);\n    } else {\n      destination.next(args);\n    }\n    if (shouldComplete) {\n      destination.complete();\n    }\n  };\n  ZipSubscriber.prototype._tryresultSelector = function (args) {\n    var result;\n    try {\n      result = this.resultSelector.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  };\n  return ZipSubscriber;\n}(_Subscriber.Subscriber);\nexports.ZipSubscriber = ZipSubscriber;\n\nvar StaticIterator = /*@__PURE__*/function () {\n  function StaticIterator(iterator) {\n    this.iterator = iterator;\n    this.nextResult = iterator.next();\n  }\n  StaticIterator.prototype.hasValue = function () {\n    return true;\n  };\n  StaticIterator.prototype.next = function () {\n    var result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  };\n  StaticIterator.prototype.hasCompleted = function () {\n    var nextResult = this.nextResult;\n    return Boolean(nextResult && nextResult.done);\n  };\n  return StaticIterator;\n}();\nvar StaticArrayIterator = /*@__PURE__*/function () {\n  function StaticArrayIterator(array) {\n    this.array = array;\n    this.index = 0;\n    this.length = 0;\n    this.length = array.length;\n  }\n  StaticArrayIterator.prototype[_iterator.iterator] = function () {\n    return this;\n  };\n  StaticArrayIterator.prototype.next = function (value) {\n    var i = this.index++;\n    var array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  };\n  StaticArrayIterator.prototype.hasValue = function () {\n    return this.array.length > this.index;\n  };\n  StaticArrayIterator.prototype.hasCompleted = function () {\n    return this.array.length === this.index;\n  };\n  return StaticArrayIterator;\n}();\nvar ZipBufferIterator = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ZipBufferIterator, _super);\n  function ZipBufferIterator(destination, parent, observable) {\n    var _this = _super.call(this, destination) || this;\n    _this.parent = parent;\n    _this.observable = observable;\n    _this.stillUnsubscribed = true;\n    _this.buffer = [];\n    _this.isComplete = false;\n    return _this;\n  }\n  ZipBufferIterator.prototype[_iterator.iterator] = function () {\n    return this;\n  };\n  ZipBufferIterator.prototype.next = function () {\n    var buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  };\n  ZipBufferIterator.prototype.hasValue = function () {\n    return this.buffer.length > 0;\n  };\n  ZipBufferIterator.prototype.hasCompleted = function () {\n    return this.buffer.length === 0 && this.isComplete;\n  };\n  ZipBufferIterator.prototype.notifyComplete = function () {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  };\n  ZipBufferIterator.prototype.notifyNext = function (innerValue) {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  };\n  ZipBufferIterator.prototype.subscribe = function () {\n    return (0, _innerSubscribe.innerSubscribe)(this.observable, new _innerSubscribe.SimpleInnerSubscriber(this));\n  };\n  return ZipBufferIterator;\n}(_innerSubscribe.SimpleOuterSubscriber);\n//# sourceMappingURL=zip.js.map"},"hash":"9edb3c13ae13f7de4a01ff77b6c1652d"}