{"dependencies":[{"name":"../Observable","loc":{"line":2,"column":27}},{"name":"../util/isScheduler","loc":{"line":3,"column":28}},{"name":"../operators/mergeAll","loc":{"line":4,"column":25}},{"name":"./fromArray","loc":{"line":5,"column":26}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = merge;\n\nvar _Observable = require(\"../Observable\");\n\nvar _isScheduler = require(\"../util/isScheduler\");\n\nvar _mergeAll = require(\"../operators/mergeAll\");\n\nvar _fromArray = require(\"./fromArray\");\n\n/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nfunction merge() {\n  var observables = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n  var concurrent = Number.POSITIVE_INFINITY;\n  var scheduler = null;\n  var last = observables[observables.length - 1];\n  if ((0, _isScheduler.isScheduler)(last)) {\n    scheduler = observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = observables.pop();\n  }\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof _Observable.Observable) {\n    return observables[0];\n  }\n  return (0, _mergeAll.mergeAll)(concurrent)((0, _fromArray.fromArray)(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map"},"hash":"4bbf8bcce0e9415744c0988fb2fc9cff"}