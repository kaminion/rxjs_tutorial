{"dependencies":[{"name":"../Observable","loc":{"line":2,"column":27}},{"name":"../util/isArray","loc":{"line":3,"column":24}},{"name":"../operators/map","loc":{"line":4,"column":20}},{"name":"../util/isObject","loc":{"line":5,"column":25}},{"name":"./from","loc":{"line":6,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forkJoin = forkJoin;\n\nvar _Observable = require(\"../Observable\");\n\nvar _isArray = require(\"../util/isArray\");\n\nvar _map = require(\"../operators/map\");\n\nvar _isObject = require(\"../util/isObject\");\n\nvar _from = require(\"./from\");\n\nfunction forkJoin() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  if (sources.length === 1) {\n    var first_1 = sources[0];\n    if ((0, _isArray.isArray)(first_1)) {\n      return forkJoinInternal(first_1, null);\n    }\n    if ((0, _isObject.isObject)(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n      var keys = Object.keys(first_1);\n      return forkJoinInternal(keys.map(function (key) {\n        return first_1[key];\n      }), keys);\n    }\n  }\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector_1 = sources.pop();\n    sources = sources.length === 1 && (0, _isArray.isArray)(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe((0, _map.map)(function (args) {\n      return resultSelector_1.apply(void 0, args);\n    }));\n  }\n  return forkJoinInternal(sources, null);\n} /** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\n\nfunction forkJoinInternal(sources, keys) {\n  return new _Observable.Observable(function (subscriber) {\n    var len = sources.length;\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n    var _loop_1 = function (i) {\n      var source = (0, _from.from)(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function (value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n          values[i] = value;\n        },\n        error: function (err) {\n          return subscriber.error(err);\n        },\n        complete: function () {\n          completed++;\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n  });\n}\n//# sourceMappingURL=forkJoin.js.map"},"hash":"f858491cc0b76a894bb5994915fa2039"}