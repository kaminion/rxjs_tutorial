{"dependencies":[{"name":"tslib","loc":{"line":2,"column":25}},{"name":"./map","loc":{"line":3,"column":20}},{"name":"../observable/from","loc":{"line":4,"column":21}},{"name":"../innerSubscribe","loc":{"line":5,"column":77}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flatMap = exports.MergeMapSubscriber = exports.MergeMapOperator = undefined;\nexports.mergeMap = mergeMap;\n\nvar _tslib = require(\"tslib\");\n\nvar tslib_1 = _interopRequireWildcard(_tslib);\n\nvar _map = require(\"./map\");\n\nvar _from = require(\"../observable/from\");\n\nvar _innerSubscribe = require(\"../innerSubscribe\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nfunction mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return (0, _from.from)(project(a, i)).pipe((0, _map.map)(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\nvar MergeMapOperator = /*@__PURE__*/function () {\n  function MergeMapOperator(project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n  };\n  return MergeMapOperator;\n}();\nexports.MergeMapOperator = MergeMapOperator;\n\nvar MergeMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeMapSubscriber, _super);\n  function MergeMapSubscriber(destination, project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n    var _this = _super.call(this, destination) || this;\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result);\n  };\n  MergeMapSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new _innerSubscribe.SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = (0, _innerSubscribe.innerSubscribe)(ish, innerSubscriber);\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  };\n  MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n  MergeMapSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n  return MergeMapSubscriber;\n}(_innerSubscribe.SimpleOuterSubscriber);\nexports.MergeMapSubscriber = MergeMapSubscriber;\nvar flatMap = exports.flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map"},"hash":"b45fd3b0c230ede8751ce299bd594e30"}