{"dependencies":[{"name":"rxjs","loc":{"line":1,"column":69}}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");\n\nconsole.log(_rxjs.Observable); // 데이터를 계속 비동기적으로 일련의 스트림을 생성시켜주는 역할을 함\n\n// subscriber를 통해 여러개의 데이터를 \n// promise 는 생성과 동시에 실행됨\nconst promise1 = new Promise((resolve, reject) => {\n  resolve('promise 1');\n}).then(console.log);\n\n// 일련의 데이터를 제공하고 subscribe 메서드에서 제공되는 옵저버에서 데이터를 읽을 수 있다. 실행시키려면 subscribe를 해야 실행이 된다. (실제 observer가 됨)\nconst intervalObsvr = new _rxjs.Observable(observer => {\n  // create 메서드를 통해 만들수도있으며, 일반 함수로 만들수도 있다\n  console.log('start subscriber...');\n  let i = 0;\n\n  setInterval(() => {\n    observer.next(i++);\n    //observer.error(new Error(\"got error\"))\n    observer.complete();\n  }, 1000);\n});\n\n// object가 아닌 함수로 인자를 건네줄수있음, 1번째 next, 2번째는 error 3번째가 complete\n// intervalObsvr.subscribe({\n//     next(value){\n//         console.log(\"2\", value)\n//     },\n//     complete(){\n//         console.log(\"complete\")\n//     },\n//     error(error){\n\n//     }\n// })\n\n// 시작과 끝을 정해서 연속적인 수를 생성하는 Observable 생성가능\n// range(0, 4).subscribe(console.log);\n\n// 인자를 전달하면 하나하나 만들어줌\n// of(...[1, 2, 3], 4, 5, 6).subscribe(console.log);\n\n// 1초마다 값을 만들어 전달\n// interval(1000).subscribe(console.log);\n\n// timeout, timeinterval\n// timer(1000, 500).subscribe(console.log)\n\n// 배열 요소 next로 전달 observer에게\n// from([4, 3, 2, 1]).subscribe(console.log, ()=>{}, ()=>{console.log('complete')}) // 1 next, 2 error, 3 complete\n\n// from(new Map([\n//     [{key: 1}, {name: \"xxx01\"}],\n//     [{key: 2}, {name: \"xxx02\"}]\n// ])).subscribe(console.log);\n\n// promise를 observable로 변경하여 처리 가능, 특히 ajax\n(0, _rxjs.from)(promise1).subscribe(console.log);"},"hash":"78797ebb92346e6b78ab84b59121b75b"}