{"dependencies":[{"name":"rxjs","loc":{"line":1,"column":27}}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");\n\nconsole.log(_rxjs.Observable); // 데이터를 계속 비동기적으로 일련의 스트림을 생성시켜주는 역할을 함\n\n// subscriber를 통해 여러개의 데이터를 \n// promise 는 생성과 동시에 실행됨\nnew Promise((resolve, reject) => {\n  resolve('promise 1');\n}).then(console.log);\n\n// 일련의 데이터를 제공하고 subscribe 메서드에서 제공되는 옵저버에서 데이터를 읽을 수 있다. 실행시키려면 subscribe를 해야 실행이 된다. (실제 observer가 됨)\nconst intervalObsvr = new _rxjs.Observable(observer => {\n  // create 메서드를 통해 만들수도있다\n  console.log('start subscriber...');\n  let i = 0;\n\n  setInterval(() => {\n    observer.next(i++);\n    //observer.error(new Error(\"got error\"))\n    observer.complete();\n  }, 1000);\n});\n\n// object가 아닌 함수로 인자를 건네줄수있음, 1번째 next, 3번째가 complete\nintervalObsvr.subscribe({\n  next(value) {\n    console.log(\"2\", value);\n  },\n  complete() {\n    console.log(\"complete\");\n  },\n  error(error) {}\n});"},"hash":"25790ba87189b3d63ccc1001c738963f"}